// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SomeShop.Ordering.EF;

#nullable disable

namespace SomeShop.Ordering.EF.Migrations
{
    [DbContext(typeof(OrderingDbContext))]
    partial class OrderingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ordering")
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SomeShop.Ordering.Domain.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<long>("TotalProductsPositions")
                        .HasColumnType("bigint")
                        .HasColumnName("total_products_positions");

                    b.HasKey("Id")
                        .HasName("pk_carts");

                    b.ToTable("carts", "ordering");
                });

            modelBuilder.Entity("SomeShop.Ordering.Domain.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid")
                        .HasColumnName("cart_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<uint>("Quantity")
                        .HasColumnType("bigint")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_cart_items");

                    b.HasIndex("CartId")
                        .HasDatabaseName("ix_cart_items_cart_id");

                    b.ToTable("cart_items", "ordering");
                });

            modelBuilder.Entity("SomeShop.Ordering.Domain.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid")
                        .HasColumnName("cart_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("FailReason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fail_reason");

                    b.Property<string>("ReservationStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reservation_status");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.ToTable("orders", "ordering");
                });

            modelBuilder.Entity("SomeShop.Ordering.Domain.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<uint>("Quantity")
                        .HasColumnType("bigint")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_order_items");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_items_order_id");

                    b.ToTable("order_items", "ordering");
                });

            modelBuilder.Entity("SomeShop.Ordering.Domain.Cart", b =>
                {
                    b.OwnsOne("SomeShop.Common.Domain.Money", "TotalSum", b1 =>
                        {
                            b1.Property<Guid>("CartId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("total_sum_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("varchar(3)")
                                .HasColumnName("total_sum_currency");

                            b1.HasKey("CartId");

                            b1.ToTable("carts", "ordering");

                            b1.WithOwner()
                                .HasForeignKey("CartId")
                                .HasConstraintName("fk_carts_carts_id");
                        });

                    b.Navigation("TotalSum")
                        .IsRequired();
                });

            modelBuilder.Entity("SomeShop.Ordering.Domain.CartItem", b =>
                {
                    b.HasOne("SomeShop.Ordering.Domain.Cart", null)
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cart_items_carts_cart_temp_id");

                    b.OwnsOne("SomeShop.Common.Domain.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("CartItemId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("price_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("varchar(3)")
                                .HasColumnName("price_currency");

                            b1.HasKey("CartItemId");

                            b1.ToTable("cart_items", "ordering");

                            b1.WithOwner()
                                .HasForeignKey("CartItemId")
                                .HasConstraintName("fk_cart_items_cart_items_id");
                        });

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("SomeShop.Ordering.Domain.Order", b =>
                {
                    b.OwnsOne("SomeShop.Common.Domain.Money", "TotalSum", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("total_sum_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("varchar(3)")
                                .HasColumnName("total_sum_currency");

                            b1.HasKey("OrderId");

                            b1.ToTable("orders", "ordering");

                            b1.WithOwner()
                                .HasForeignKey("OrderId")
                                .HasConstraintName("fk_orders_orders_id");
                        });

                    b.Navigation("TotalSum")
                        .IsRequired();
                });

            modelBuilder.Entity("SomeShop.Ordering.Domain.OrderItem", b =>
                {
                    b.HasOne("SomeShop.Ordering.Domain.Order", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_orders_order_temp_id");

                    b.OwnsOne("SomeShop.Common.Domain.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("OrderItemId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("price_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("varchar(3)")
                                .HasColumnName("price_currency");

                            b1.HasKey("OrderItemId");

                            b1.ToTable("order_items", "ordering");

                            b1.WithOwner()
                                .HasForeignKey("OrderItemId")
                                .HasConstraintName("fk_order_items_order_items_id");
                        });

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("SomeShop.Ordering.Domain.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SomeShop.Ordering.Domain.Order", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
